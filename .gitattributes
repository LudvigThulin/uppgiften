/*
* Name: clock and temp project
* Author: Ludvig Thulin
* Date: 2024-10-23
* Description: This project uses a ds3231 to measure time and displays the time to an 1306 oled display,
* Further, it measures temprature with a analog temprature module and displays a mapped value to a 9g-servo-motor
*/

// Include Libraries
#include "U8glib.h"
#include <Wire.h>
#include <DS3231.h>
#include <Servo.h>

// Init constants
const int tempPin = A1;
Servo myservo;

RTClib myRTC;

// Init global variables
byte timmar;
byte minuter;
byte sekunder;
// construct objects

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE|U8G_I2C_OPT_DEV_0);  // I2C / TWI 

void setup() {
  // init communication
  Serial.begin(9600);
  
  // Init Hardware
  pinMode(tempPin, INPUT);        // Temperaturen
  pinMode(7, OUTPUT);             // Led
  myservo.attach(9);              // Servo
  Wire.begin();
 }

void loop() {
  
  getTime(timmar, minuter, sekunder);                 // Anropar temperaturfunktionen. Värdena från funktionen lagaras i timmar, minuter, sekunder
  // Serial.print(timmar);
  u8g.firstPage();
 
  do {
    oledWrite(getTemp(), timmar, minuter, sekunder);  // Anropar skärmfunktionen och skickar in värdena temperatur, timmar, minuter, sekunder i funktionen
  } while( u8g.nextPage() );
  
  servoWrite(getTemp());                              // Anropar servofunktionen med funktionen temperatur

  led();                                              // Anropar led som blinkar
}


/* Funktion som anropar en RTC klocka
* Den fanns inte med i din text
*/
byte getTime(byte &h, byte &m, byte &s){        // Funktion tid (& framför variabeln gör att den uppdateras och inte behöver skickas tillbaka)
  DateTime now = myRTC.now();                   // Uppdaterar now med tiden
  h=now.hour();                                 // lagrar timme i variabeln h
  m=now.minute();
  s=now.second();
}

/*
* This function reads an analog pin connected to an analog temprature sensor and calculates the corresponding temp
*Parameters: Void
*Returns: temprature as float
*/
float getTemp(){                                // Temperaturfunktion
  float temp = 0;
  float R1 = 10000;                             // value of R1 on board
  float logR2, R2, T;
  float c1 = 0.001129148, c2 = 0.000234125, c3 = 0.0000000876741;  //steinhart-hart coeficients for thermistor

  int Vo = analogRead(tempPin);
  R2 = R1 * (1023.0 / (float)Vo - 1.0);         //calculate resistance on thermistor
  logR2 = log(R2);
  temp = (1.0 / (c1 + c2 * logR2 + c3 * logR2 * logR2 * logR2));  // temperature in Kelvin
  temp = temp - 273.15;                                           //convert Kelvin to Celcius
  return temp;                                                    // Retunerar temperaturen
}

/*
* This function takes a string and draws it to an oled display
*Parameters: - text: String to write to display
*Returns: void
*/
void oledWrite(float temp, byte t, byte m, byte s) { // Skriver ut temp på oled. Värdena som skickas in i funktionen lagaras i temp, t, m och s
  u8g.setFont(u8g_font_unifont);                // Bestämmer typsnitt
  u8g.setPrintPos(0,20);                        // sätter position på skärmen
  u8g.print("temp:");                           // skriver ut "temp" på skärmen
  u8g.setPrintPos(50,20);                       // ny position
  u8g.print(temp,1);                              // skriver ut temp (värdet)
  u8g.setPrintPos(0, 50);
  u8g.print(t);
  u8g.setPrintPos(20,50);
  u8g.print(m);
  u8g.setPrintPos(39,50);
  u8g.print(s);
}

void clearOLED(){                               // Rensar skärmen (Funktion som inte används)
  u8g.firstPage();
  do {
  } while (u8g.nextPage());
}

/*
* takes a temprature value and maps it to corresppnding degree on a servo
*Parameters: - value: temprature
*Returns: void
*/
void servoWrite(int value){                   // Funktionen servo
  //Serial.print("Värde i serverfunktionen: ");
  //Serial.println(value);
    myservo.write(value);                     // skickar servot till positionen för hela gradtalet
    delay(15);                                // väntar 15 ms för att servot skall komma i rätt position
}

void led() {
  digitalWrite (7, HIGH);
  delay(100);
  digitalWrite (7, LOW); 
}
